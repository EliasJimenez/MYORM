using MyORM.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using static Modulo;

namespace MyORM
{
    public class MyQuerybuilder
    {
       public int tableIndex = 0;
       public int columnIndex = 0;
        public MyQuerybuilder(Type TipoBase)
        {
            var _query = new Query();
            GetProperties("", TipoBase);
          
        }
        public List<Field> lstSelect = new List<Field>();
        public List<Field> lstFields = new List<Field>();
        public List<Field> lstWhere = new List<Field>();
        public List<Field> lstOrder = new List<Field>();
        public List<Query> Querys = new List<Query>();


        private void GetProperties(string root, Type tipo)
        {
            string separador = string.IsNullOrEmpty(root) ? "" : ".";
            Query _query = new Query();

            var properties = tipo.GetProperties().Where(t => t.GetCustomAttributes(typeof(Join), false).Length == 0 && t.GetCustomAttributes(typeof(AutoGeneratedNoDB), false).Length == 0);
            var Joins = tipo.GetProperties().Where(t => t.GetCustomAttributes(typeof(Join), false).Length > 0 && t.GetCustomAttributes(typeof(AutoGeneratedNoDB), false).Length == 0);

            foreach (PropertyInfo property in properties)
            {
                if ((property.PropertyType.IsClass && property.PropertyType != typeof(string)) || property.PropertyType.IsInterface) continue;
                lstSelect.Add(new MyORM.Field($"t{tableIndex}", property.GetColumnName(), $"{root}{separador}{property.GetColumnName()}", $"C{columnIndex}",property.PropertyType));
                lstFields.Add(new MyORM.Field($"t{tableIndex}", property.GetColumnName(), $"{root}{separador}{property.GetColumnName()}", $"C{columnIndex}",property.PropertyType));
                columnIndex++;
            }


            _query.Table = tipo.GetTableName();
            _query.Alias = $"t{tableIndex}";

            if (string.IsNullOrEmpty(root))
                Querys.Add(_query);


            foreach (PropertyInfo property in Joins)
            {
                _query = new Query();
                Join MyAttribute = (Join)Attribute.GetCustomAttributes(property, false).FirstOrDefault(t => t is Join);

                if(MyAttribute.Key == null && MyAttribute.ForeignKey == null)
                {
                    var p = property.PropertyType.GetProperties().FirstOrDefault(a => a.GetCustomAttributes(typeof(PrimaryKey), true).Length > 0);
                    if (p == null) continue;

                    var p2 = tipo.GetProperty(p.Name, p.PropertyType);
                    if (p2 == null) continue;

                    MyAttribute.Key = p.GetColumnName();
                    MyAttribute.ForeignKey = p2.GetColumnName();
                }

                var joinTable = Querys.FirstOrDefault(t => t.Table == tipo.GetTableName());
                _query.JoinTable = joinTable.Alias;
                _query.JoinTableParam2 = $"{joinTable.Alias}.{MyAttribute.ForeignKey}";
                _query.Join = Enum.GetName(typeof(Jointype), MyAttribute.Type);
                tableIndex++;

                Type _tipo = property.PropertyType;
                if (_tipo.IsInterface) continue;
                   

                _query.Table = _tipo.GetTableName();
                _query.Alias = $"t{tableIndex}";
                _query.JoinTableParam1 = $"t{tableIndex}.{MyAttribute.Key}";
                Querys.Add(_query);
                GetProperties($"{root}{separador}{property.GetColumnName()}", _tipo);
            }
        }

        public override string ToString()
        {
         
            string select = this.Select;
            string where = this.Where;
            string order = this.Order;
            bool hasWhere = !string.IsNullOrEmpty(where);
            bool hasOrder = !string.IsNullOrEmpty(order);
            string from = this.From;
            string top = this.Top != null ? $"TOP {Top}" : "";

            string QUERY = $"SELECT {top} {(this.Count ? " COUNT(*) " : select)}\nFROM {from}";
            if (hasWhere)
                QUERY += $"\n WHERE {where}";

            if (hasOrder)
                QUERY += $"\n ORDER BY {order}";

            if (Any)
                QUERY = $"SELECT CASE WHEN EXISTS ({QUERY}) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END";
            return QUERY;

        }

        public string Top
        {
            get;set;
        }
        public string Select
        {
            get
            {

                return string.Join(",", this.lstSelect.Select(t => $"\n{t.Table}{( string.IsNullOrEmpty(t.Table) ? "" : ".")}{t.DbField} AS {t.DbAlias}"));
            }
        }

        public string Where
        {
            get
            {
            
                return string.Join(" ",  this.lstWhere.Select(t => $"\n {t.BinaryType} {t.Table}{(string.IsNullOrEmpty(t.Table) ? "" : ".")}{t.DbField} {t.Operator} {t.Value} "));
            }
        }

        public string From
        {
            get
            {
                //var _querys = RemoveUnnecesaryTables(this.Querys);
                var _querys = this.Querys;
                string from = "";
                for (int a = 0; a < _querys.Count; a++)
                {
                    var query = _querys[a];

                    

                    if (a > 0)
                        from += $"\n{query.Join} JOIN";

                    from += $" {query.Table} {query.Alias}";

                    if (a > 0)
                        from += $" ON {query.JoinTableParam1} = {query.JoinTableParam2}\n";

                }

                return from;
            }
        }

        private List<Query> RemoveUnnecesaryTables(List<Query> querys)
        {
            var fields = this.lstSelect.Union(this.lstWhere);
            List<Query> tables = new List<MyORM.Query>();
           
            foreach(var table in this.Querys)
            {
                if (fields.Any(t => t.Table.ToLower() == table.Alias.ToLower()))
                    tables.Add(table);

               
            }

            return tables;
        }

        public string Order
        {
            get
            {
                return string.Join(",", lstOrder.Select(t => $"\n{t.Table}{(string.IsNullOrEmpty(t.Table) ? "" : ".")}{t.DbField} {t.DbAlias}")).Trim();
            }
        }

        public bool Count { get; set; }
        public bool Any { get; set; }
    }






    public class Query
    {
        public string Table { get; set; }
        public string Alias { get; set; }
        public string Join { get; set; }
        public string JoinTableParam1 { get; set; }
        public string JoinTableParam2 { get; set; }
        public string JoinTable { get; set; }
    }


    public class Field : ICloneable
    {
        public Field() { }
        public Field(string table, string dbField, string typeField)
        {
            this.Table = table;
            this.DbField = dbField;
            this.TypeField = typeField;
            this.DbAlias = dbField;
        }

        public Field(string table, string dbField, string typeField, string dbAlias)
        {
            this.Table = table;
            this.DbField = dbField;
            this.TypeField = typeField;
            this.DbAlias = dbAlias;
        }

        public Field(string table, string dbField, string typeField, string dbAlias, Type type)
        {
            this.Table = table;
            this.DbField = dbField;
            this.TypeField = typeField;
            this.DbAlias = dbAlias;
            this.Type = type;
        }

        public string Table { get; set; }
        public string DbField { get; set; }
        public string DbAlias { get; set; }
        public string TypeField { get; set; }
        public string Operator { get; set; }
        public string BinaryType { get; set; }
        public string Value { get; set; }
        public Type Type { get; set; }

        public override string ToString()
        {
            return $"{Table}.{DbField} AS {DbAlias} - {TypeField}";
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }
}
